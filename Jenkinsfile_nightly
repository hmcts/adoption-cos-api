#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 8 * * 1-5')]),
  parameters([
    string(name: 'URL_TO_TEST', defaultValue: 'http://adoption-cos-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
    string(name: 'SecurityRules',
      defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}'      : [
    secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
    secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
    secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}'      : [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
  ],
  'adoption-${env}'    :[
    secret('definition-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
    secret('definition-importer-password', 'DEFINITION_IMPORTER_PASSWORD'),
    secret('idam-secret', 'OAUTH2_CLIENT_SECRET'),
    secret('idam-secret', 'IDAM_CLIENT_SECRET'),
    // secret('idam-solicitor-username', 'IDAM_SOLICITOR_USERNAME'),
    // secret('idam-solicitor-password', 'IDAM_SOLICITOR_PASSWORD'),
    secret('idam-system-user-name', 'IDAM_SYSTEM_UPDATE_USERNAME'),
    secret('idam-system-user-password', 'IDAM_SYSTEM_UPDATE_PASSWORD'),
    secret('s2s-secret-cos-api', 'S2S_SECRET'),
    secret('AppInsightsInstrumentationKey', 'APP_INSIGHTS_KEY'),
    secret("launchDarkly-sdk-key", "LAUNCH_DARKLY_SDK_KEY"),
    secret("caseworker-username", "CASEWORKER_USERNAME"),
    secret("caseworker-password", "CASEWORKER_PASSWORD"),
    secret("s2s-secret", "S2S_SECRET_WEB"),
    secret("send-grid-api-key", "SEND_GRID_API_KEY"),
    secret("sendgrid-notify-from-email", "SEND_GRID_NOTIFY_FROM_EMAIL"),

  ]
]

@Library("Infrastructure")

def type = "java"
def product = "adoption"
def component = "spring-boot-template"

def setCommonEnvVariables() {
    env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
    env.IDAM_API_BASEURL = "https://idam-api.aat.platform.hmcts.net"
    env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.FEE_API_URL = "http://fees-register-api-aat.service.core-compute-aat.internal"
    env.CCD_API_GATEWAY_OAUTH2_CLIENT_ID = "ccd_gateway"
    env.BEFTA_S2S_CLIENT_ID = "ccd_data"
    env.ADOPTION_WEB_CLIENT_ID = "adoption-web"
    env.ADOPTION_WEB_MICROSERVICE = "adoption_web"
    env.CCD_API_GATEWAY_OAUTH2_REDIRECT_URL = "https://www-ccd.aat.platform.hmcts.net/oauth2redirect"
    env.TEST_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
}

onMaster {
    env.ENVIRONMENT="aat"
    env.CASE_API_URL="http://adoption-cos-api-aat.service.core-compute-aat.internal"
    env.CCD_DEF_NAME="aat"
    env.DEFINITION_STORE_URL_BASE="http://ccd-definition-store-api-aat.service.core-compute-aat.internal"
    env.CITIZEN_UPDATE_CASE_STATE_ENABLED=true
    env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

    setCommonEnvVariables()
  }

withNightlyPipeline(type, product, component) {
  env.TEST_URL = "http://adoption-cos-api-aat.service.core-compute-aat.internal"
  enableSlackNotifications('#adoption-tech')
  enableSecurityScan()
  enableFortifyScan()
  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }
  enableFullFunctionalTest(200)
}

afterAlways('fullFunctionalTest') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]

    dir("${WORKSPACE}") {
      steps.archiveArtifacts  allowEmptyArchive: true, artifacts: "build/reports/tests/functional/**/*"
    }
  }