buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://jitpack.io"
      content {
        excludeGroup "com.github.ben-manes.versions"
      }
    }

  }
  dependencies {
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.33.956'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'idea'
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '6.5.0.1'
  id 'org.sonarqube' version '3.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.5.6'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'hmcts.ccd.sdk' version '0.24.8'
}



group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '11'
  targetCompatibility = '11'

  apply plugin: 'checkstyle'
  apply plugin: 'com.github.ben-manes.versions'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'cz.habarta.typescript-generator'
}

ccd {
  configDir = file('ccd-definitions/definitions')
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
  }
}

idea {
  module {
    testSourceDirs += file('src/integrationTest/java')
    testSourceDirs += file('src/functionalTest/java')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

//task smoke(type: Test) {
  //description = "Runs Smoke Tests"
  //testClassesDirs = sourceSets.smokeTest.output.classesDirs
  //classpath = sourceSets.smokeTest.runtimeClasspath
  //include "uk/gov/hmcts/reform/adoption/smoketests/**"
//}

task highLevelDataSetup(type: JavaExec) {
  mainClass.set("uk.gov.hmcts.reform.adoption.common.ccd.HighLevelDataSetupApp")
  classpath += sourceSets.main.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/uk/gov/hmcts/reform/adoption/common/ccd/**',
  '**/uk/gov/hmcts/reform/adoption/Application.java',
  '**/uk/gov/hmcts/reform/adoption/common/config/**'
]

sonarqube {
  properties {
    property "sonar.projectName", "Adoption :: adoption-cos-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:adoption-cos-api"
    property "sonar.exclusions", "**/*" //TODO temporary
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.coverage.exclusions", "**/*" //TODO temporary  }
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.0.1-jre') {
      entry 'guava'
    }
  }
}

def reloadCcd = tasks.register('reloadCcd') {
  group = 'ccd tasks'
  doLast {
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine './bin/process-and-import-ccd-definition.sh'
    }
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine 'docker-compose', '-f', '../docker-compose.yml', 'up', '--build', '-d', 'adoption-cos-api'
    }
  }
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'uk.gov.hmcts.reform.adoption.**.model.*',
    'uk.gov.hmcts.ccd.sdk.type.*',
  ]
  outputFile = 'build/ts/index.ts'
  outputKind = 'module'
  outputFileType = 'implementationFile'
  mapEnum = 'asEnum'
  mapDate = 'asString'
  group = 'ccd tasks'

  doLast {
    exec {
      commandLine 'yarn', 'prepublishOnly'
    }
  }
}

ccd {
  configDir = file('build/definitions')
}

reloadCcd.configure {
  dependsOn assemble, generateCCDConfig
}

tasks.register('stopCaseApiContainer') {
  group = 'ccd tasks'

  doFirst {
    exec {
      executable "sh"
      args "-c", "docker stop adoption-cos-api || exit 0"
    }
  }
}

generateCCDConfig.dependsOn stopCaseApiContainer

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

def versions = [
  awaitility                  : '1.7.0',
  guava                       : '30.1-jre',
  springfoxSwagger            : '2.9.2',
  lombok                      : '1.18.20',
  s2sClient                   : '4.0.0',
  junit                       : '5.8.2'
]

ext {
  reformLoggingVersion = "5.1.9"
}

ext["rest-assured.version"] = '4.4.0'

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  // uncomment for local version
  // implementation group: 'com.github.hmcts', name: 'ccd-config-generator', version: '0.24.8'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.0.4'

  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: reformLoggingVersion
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: reformLoggingVersion

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.15.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.15.0'
  implementation(group: 'com.google.guava', name: 'guava', version: versions.guava)

  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.6.0-prerelease'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.8.3'

  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient

  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '7.15.1'

  implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'
  implementation group: 'org.springframework', name: 'spring-aspects', version: '5.3.12'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation(platform('org.junit:junit-bom:5.8.1'))
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
    exclude(module: 'android-json')
  }

  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
  testImplementation group: 'org.assertj', name: 'assertj-guava', version: '3.4.0'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '3.0.4'

  testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.1.0'

  testImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: versions.awaitility

  testImplementation group: 'com.github.stefanbirkner', name: 'system-lambda', version: '1.2.0'
  testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.7'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath

  //smokeTestImplementation sourceSets.main.runtimeClasspath
  //smokeTestImplementation sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.adoption.Application'

bootJar {
  archiveFileName = "adoption-cos-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'adoption-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

bootRun {
  doFirst() {
    if (System.getenv("IDAM_API_BASEURL") == null) {
      println("Loading secrets from vault")

      systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'

      systemProperty 'S2S_SECRET', getVaultSecret('s2s-cos-api-secret')
      systemProperty 'IDAM_SYSTEM_UPDATE_USERNAME', getVaultSecret('idam-systemupdate-username')
      systemProperty 'IDAM_SYSTEM_UPDATE_PASSWORD', getVaultSecret('idam-systemupdate-password')
      systemProperty 'IDAM_CLIENT_SECRET', getVaultSecret('idam-client-secret')

      if (System.getenv("BOOT_RUN_DOCKER")) {
        systemProperty 'IDAM_API_BASEURL', 'http://localhost:5000'
        systemProperty 'CASE_DATA_STORE_BASEURL', 'http://localhost:4452'
      }
    }
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
//rootProject.tasks.named("processSmokeTestResources") {
//  duplicatesStrategy = 'include'
//}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
