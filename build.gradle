buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://jitpack.io"
      content {
        excludeGroup "com.github.ben-manes.versions"
      }
    }

  }
  dependencies {
    classpath "net.serenity-bdd:serenity-gradle-plugin:2.4.34"
    classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.36.1070'
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'idea'
  id 'pmd'
  id 'jacoco'
  id 'org.owasp.dependencycheck' version '7.1.0.1'
  id 'org.sonarqube' version '3.3'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.7.0'
  id 'com.github.ben-manes.versions' version '0.38.0'
  id 'com.github.hmcts.rse-cft-lib' version '0.19.222'
  id 'hmcts.ccd.sdk' version '3.0.3'
  id 'au.com.dius.pact' version '4.3.8'
}

apply plugin: 'cz.habarta.typescript-generator'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts'
version = '0.0.1'

ccd {
  configDir = file('ccd-definitions/definitions')
}

ext['elasticsearch.version'] = '7.17.3'
ext['snakeyaml.version'] = '1.32'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

idea {
  module {
    testSourceDirs += file('src/integrationTest/java')
    testSourceDirs += file('src/functionalTest/java')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
  contractTestImplementation.extendsFrom testImplementation
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
  useJUnitPlatform()
}
task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}
task yarnInstall(type: Exec) {
  workingDir '.'
  commandLine 'yarn', 'install'
}
task smoke(type: Test,dependsOn: ':yarnInstall') {
  description = "Runs Smoke Tests"
  doLast {
    exec {
      commandLine 'yarn', 'test:smoke'
    }
  }
}

task functional(type: Test,dependsOn: ':yarnInstall') {
  description = "Runs functional tests"
  doLast {
    exec {
      commandLine 'yarn', 'test:functional'
    }
  }
}
task highLevelDataSetup(type: JavaExec) {
  mainClass.set("uk.gov.hmcts.reform.adoption.common.ccd.HighLevelDataSetupApp")
  classpath += sourceSets.main.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
  description = "Runs the consumer Pact tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  consoleOutput = true
  ruleSets = []
  ruleSetFiles = files("${rootDir}/config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacoco {
  toolVersion = "0.8.8"
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.0
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  outputDirectory = 'build/reports/'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
  '**/uk/gov/hmcts/reform/adoption/common/ccd/**',
  '**/uk/gov/hmcts/reform/adoption/common/service/**',
  '**/uk/gov/hmcts/reform/adoption/Application.java',
  '**/uk/gov/hmcts/reform/adoption/common/config/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/caseworker/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/event/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/model/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/search/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/service/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/tab/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/task/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/workbasket/**',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/Adoption.java',
  '**/uk/gov/hmcts/reform/adoption/payment/**',
  '**/uk/gov/hmcts/reform/adoption/controllers/**',
  '**/uk/gov/hmcts/reform/adoption/config/launchdarkly/LaunchdarklyIntValidationService.java',
  '**/uk/gov/hmcts/reform/adoption/config/launchdarkly/LaunchDirectlyIntValidationController.java',
  '**/uk/gov/hmcts/reform/adoption/idam/**',
  '**/uk/gov/hmcts/reform/adoption/common/AddSystemUpdateRole.java',
  '**/uk/gov/hmcts/reform/adoption/common/notification/**',
  '**/uk/gov/hmcts/reform/adoption/document/content/**',
  '**/uk/gov/hmcts/reform/adoption/document/DocumentConstants.java',
  '**/uk/gov/hmcts/reform/adoption/document/DocumentInfo.java',
  '**/uk/gov/hmcts/reform/adoption/document/DocumentType.java',
  '**/uk/gov/hmcts/reform/adoption/notification/FormatUtil.java',
  '**/uk/gov/hmcts/reform/adoption/notification/CommonContent.java',
  '**/uk/gov/hmcts/reform/adoption/notification/ApplicantNotification.java',
  '**/uk/gov/hmcts/reform/adoption/notification/NotificationDispatcher.java',
  '**/uk/gov/hmcts/reform/adoption/common/service/task/SetStateAfterSubmission.java',
  '**/uk/gov/hmcts/reform/adoption/exception/**',
  '**/uk/gov/hmcts/reform/adoption/document/BulkPrintService.java',
  '**/uk/gov/hmcts/reform/adoption/adoptioncase/validation/ApplicationValidation.java',
  '**/uk/gov/hmcts/reform/adoption/config/SwaggerConfiguration.java'

]

sonarqube {
  properties {
    property "sonar.projectName", "Adoption :: adoption-cos-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:adoption-cos-api"
    property "sonar.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.exclusions", sonarExclusions.join(', ')
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '31.1-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
  // Some Cftlib services still depend on jcenter
  jcenter()
}

def versions = [
  awaitility        : '1.7.0',
  jackson           : '2.13.2',
  junit             : '5.8.1',
  junitPlatform     : '1.8.2',
  lombok            : '1.18.20',
  reformsJavaLogging: '5.1.7',
  springBoot        : springBoot.class.package.implementationVersion,
  springfoxSwagger  : '3.0.0',
  s2sClient         : '4.0.0',
  pact              : '4.1.7',
  serenityCoreVersion: '3.0.2',
  ccdCaseDocumentAmClient      : '1.7.3'
]

ext["rest-assured.version"] = '4.4.0'

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
// uncomment for local version
//implementation group: 'com.github.hmcts', name: 'ccd-config-generator', version: 'DEV-SNAPSHOT'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.9'
  implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.3'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.3-RELEASE'
  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
  implementation group: 'com.github.hmcts', name:'ccd-case-document-am-client', version: versions.ccdCaseDocumentAmClient
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.8.6'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.2'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.17.2'
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient
  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: '3.0.10'
  implementation group: 'org.elasticsearch', name: 'elasticsearch'
  implementation group: 'com.github.hmcts', name: 'befta-fw', version: '8.7.2-Categories'
  implementation group: 'org.springframework.retry', name: 'spring-retry'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'
  implementation group: 'org.apache.poi', name: 'poi', version: '5.2.2'
  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.2'
  implementation group: 'org.apache.poi', name: 'poi-scratchpad', version: '5.2.2'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation 'com.github.hmcts:fortify-client:1.2.2:all'
  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    exclude(module: 'commons-logging')
    exclude(module: 'android-json')
  }
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.6.0'
  testImplementation group: 'com.jayway.awaitility', name: 'awaitility', version: versions.awaitility
  testImplementation group: 'com.github.stefanbirkner', name: 'system-lambda', version: '1.2.0'
  testImplementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.7'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '3.1.3'
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenityCoreVersion)
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenityCoreVersion)
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityCoreVersion)
  testImplementation (group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenityCoreVersion)

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  functionalTestImplementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.s2sClient

  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact
  contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junitJupiter

  contractTestRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junitJupiter
  contractTestRuntime "org.junit.platform:junit-platform-commons:1.8.1"
  contractTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.32') {
    force = true
  }
  contractTestCompile sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath
}

mainClassName = 'uk.gov.hmcts.reform.adoption.Application'

ext.getVaultSecret = { String secretName ->
  new ByteArrayOutputStream().withStream { os ->
    exec {
      commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'adoption-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
      standardOutput = os
    }
    return os.toString().replace('\n', '')
  }
}

bootRun {
  doFirst() {
    if (System.getenv("IDAM_API_BASEURL") == null) {
      println("Loading secrets from vault")

      systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'
      systemProperty 'UK_GOV_NOTIFY_API_KEY', getVaultSecret('uk-gov-notify-api-key')
      systemProperty 'S2S_SECRET', getVaultSecret('s2s-secret-cos-api')
      //systemProperty 'IDAM_CASEWORKER_USERNAME', getVaultSecret('idam-caseworker-username')
      //systemProperty 'IDAM_CASEWORKER_PASSWORD', getVaultSecret('idam-caseworker-password')
      systemProperty 'IDAM_SYSTEM_UPDATE_USERNAME', getVaultSecret('idam-system-user-name')
      systemProperty 'IDAM_SYSTEM_UPDATE_PASSWORD', getVaultSecret('idam-system-user-password')
      systemProperty 'IDAM_SOLICITOR_USERNAME', getVaultSecret('idam-solicitor-username')
      systemProperty 'IDAM_SOLICITOR_PASSWORD', getVaultSecret('idam-solicitor-password')
      systemProperty 'IDAM_CLIENT_SECRET', getVaultSecret('idam-secret')
      systemProperty 'APP_INSIGHTS_KEY', getVaultSecret('AppInsightsInstrumentationKey')
      systemProperty 'LAUNCH_DARKLY_SDK_KEY', getVaultSecret('launchDarkly-sdk-key')
      if (System.getenv("BOOT_RUN_DOCKER")) {
        systemProperty 'IDAM_API_BASEURL', 'http://localhost:5000'
        systemProperty 'CASE_DATA_STORE_BASEURL', 'http://localhost:4452'
      }
    }
  }
}

bootJar {
  getArchiveFileName().set(provider {
    'adoption-cos-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

functional {
  doFirst() {
    if (System.getenv("OAUTH2_CLIENT_SECRET") == null) {
      println("Loading secrets from vault")

      systemProperty 'IDAM_API_BASEURL', 'https://idam-api.aat.platform.hmcts.net'
      systemProperty 'UK_GOV_NOTIFY_API_KEY', getVaultSecret('uk-gov-notify-api-key')
      systemProperty 'S2S_SECRET', getVaultSecret('s2s-secret-cos-api')
      //systemProperty 'IDAM_CASEWORKER_USERNAME', getVaultSecret('idam-caseworker-username')
      //systemProperty 'IDAM_CASEWORKER_PASSWORD', getVaultSecret('idam-caseworker-password')
      systemProperty 'IDAM_SYSTEM_UPDATE_USERNAME', getVaultSecret('idam-system-user-name')
      systemProperty 'IDAM_SYSTEM_UPDATE_PASSWORD', getVaultSecret('idam-system-user-password')
      systemProperty 'IDAM_SOLICITOR_USERNAME', getVaultSecret('idam-solicitor-username')
      systemProperty 'IDAM_SOLICITOR_PASSWORD', getVaultSecret('idam-solicitor-password')
      systemProperty 'OAUTH2_CLIENT_SECRET', getVaultSecret('idam-secret')
      systemProperty 'APP_INSIGHTS_KEY', getVaultSecret('AppInsightsInstrumentationKey')
      systemProperty 'LAUNCH_DARKLY_SDK_KEY', getVaultSecret('launchDarkly-sdk-key')
      secret("caseworker-username", "CASEWORKER_USERNAME")
      secret("caseworker-password", "CASEWORKER_PASSWORD")
      secret("s2s-secret", "S2S_SECRET_WEB")
    }
  }
}

generateTypeScript {
  jsonLibrary = 'jackson2'
  classPatterns = [
    'uk.gov.hmcts.reform.adoption.**.model.*',
    'uk.gov.hmcts.ccd.sdk.type.*',
  ]
  outputFile = 'build/ts/index.ts'
  outputKind = 'module'
  outputFileType = 'implementationFile'
  mapEnum = 'asEnum'
  mapDate = 'asString'
  group = 'ccd tasks'

  doLast {
    exec {
      commandLine 'yarn', 'prepublishOnly'
    }
  }
}

ccd {
  configDir = file('build/definitions')
}

tasks.register('stopCosApiContainer') {
  group = 'ccd tasks'

  doFirst {
    exec {
      executable "sh"
      args "-c", "docker stop adoption-cos-api || exit 0"
    }
  }
}

def reloadCcd = tasks.register('reloadCcd') {
  group = 'ccd tasks'
  doLast {
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine './bin/process-and-import-ccd-definition.sh'
    }
    exec {
      file('../.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment key, value
      }
      commandLine 'docker-compose', '-f', '../docker-compose.yml', 'up', '--build', '-d', 'adoption-cos-api'
    }
  }
}

reloadCcd.configure {
  dependsOn assemble, generateCCDConfig
}

generateCCDConfig.dependsOn stopCosApiContainer

project.ext {
  pacticipant = 'sscs_tribunalsCaseApi'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}
runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    version = project.pacticipantVersion
  }
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}


task loadEnvSecrets() {
  doLast {
    if (!project.file('./.aat-env').exists()) {
      new ByteArrayOutputStream().withStream { os ->
        exec {
          commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'nfdiv-aat', '-o', 'tsv', '--query', 'value', '--name', 'nfdiv-case-api-dot-env'
          standardOutput = os
        }
        project.file('./.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
      }
    }
  }
}

task buildCCDXlsx(type: Exec, dependsOn: generateCCDConfig) {
  group 'ccd tasks'
  commandLine './bin/ccd-build-definition.sh'
  inputs.dir layout.buildDirectory.dir('definitions')
  outputs.dir layout.buildDirectory.dir('ccd-config')
}

bootWithCCD {
  dependsOn(buildCCDXlsx, loadEnvSecrets)
  doFirst() {
    project.file('./.aat-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment key, value
    }
  }
  authMode = uk.gov.hmcts.rse.AuthMode.AAT
}
